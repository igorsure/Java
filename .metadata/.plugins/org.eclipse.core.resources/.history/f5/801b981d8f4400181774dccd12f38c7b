import java.io.*;
import java.math.*;
import java.text.*;
import java.util.*;
import java.util.regex.*;

public class Solution {
	long[] f;
	int[][] teams;
	int n,m;
	HashSet<Integer> first;
	Solution()  throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(System.out));

        String[] nm = scanner.nextLine().split(" ");

        n = Integer.parseInt(nm[0]);

        m = Integer.parseInt(nm[1]);
        teams=new int[m][];
        f=new long[m];
        long result = maximumEfficiency(n, m);
        for(int i=0;i<m;i++) {
        	int k=scanner.nextInt();
        	f[i]=scanner.nextInt();
        	teams[i]=new int[k];
        	for(int j=0;j<k;j++) {
        		teams[i][j]=scanner.nextInt();
        	}
        }
        //dumpArr2(teams);
        result=doit();
        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
	}
	long doit() {
		long result=0;
		result=Math.max(result, doitOne());
		result=Math.max(result, doitTwo());
		if (n>2)
			result=Math.max(result, doitTwo());
		if (n>3)
			result=Math.max(result, doitTwo());
		return result;
	}
	private long doitOne() {
		long res=0;
		first=new HashSet<Integer>();
		for(int i=1;i<=n;i++) {
			 first.add(i);
			 long resCurrent=calcFirstMembersAllTeams();
		     first.remove(i);
		     res=Math.max(res,resCurrent);
		}
		return res;
	}
	private long doitTwo() {
		long res=0;
		first=new HashSet<Integer>();
		for(int i1=1;i1<=n;i1++) {
			first.add(i1);
			for(int i2=i1+1;i2<=n;i2++) {
				 first.add(i2);
				 long resCurrent=calcFirstMembersAllTeams();
			     res=Math.max(res,resCurrent);
			     first.remove(i2);
			}
		     first.remove(i1);
		}
		return res;
	}
	private long doitThree() {
		long res=0;
		first=new HashSet<Integer>();
		for(int i1=1;i1<=n;i1++) {
			first.add(i1);
			for(int i2=i1+1;i2<=n;i2++) {
				 first.add(i2);
				 for(int i3=i2+1;i3<=n;i3++) {
					 first.add(i3);
					 long resCurrent=calcFirstMembersAllTeams();
				     res=Math.max(res,resCurrent);
				     first.remove(i3);
				 }
			     first.remove(i2);
			}
		     first.remove(i1);
		}
		return res;
	}
	private long doitFour() {
		long res=0;
		first=new HashSet<Integer>();
		for(int i1=1;i1<=n;i1++) {
			first.add(i1);
			for(int i2=i1+1;i2<=n;i2++) {
				 first.add(i2);
				 for(int i3=i2+1;i3<=n;i3++) {
					 first.add(i3);
                     for(int i4=i3+1;i4<=n;i4++) {
                         first.add(i4);
					     long resCurrent=calcFirstMembersAllTeams();
				         res=Math.max(res,resCurrent);
                         first.remove(i4);
                     }
				     first.remove(i3);
				 }
			     first.remove(i2);
			}
		     first.remove(i1);
		}
		return res;
	}
	private long calcFirstMembersAllTeams() {
		 long resCurrent=0;
		 for(int j=0;j<m;j++) {
		     int amount=calcFirstMembers(teams[j]);
		     if (amount==0 || amount==teams[j].length) {
		    	 resCurrent+=f[j];
		     }
		 }
		 return resCurrent
             for(int i4=i3+1;i4
                 first.add(i4);<=n;i4++);
	    }
	     private int calcFirstMembers(int[] tea
                                                            first}m) {
		int res=0;
		fo.remove(i4);r(int i=0;i<team.length;i++) {
			if (first.contains(team[i])){
				res++;
			}
		}
		return res;
	}
	void dumpArr(int[] ar) {
		for(int i=0;i<ar.length;i++) {
			System.out.print(ar[i]+" ");
		}
		System.out.println("");
	}
	void dumpArr2(int[][] ar) {
		for(int i=0;i<ar.length;i++) {
			dumpArr(ar[i]);
		}
		System.out.println("");
	}
    // Complete the maximumEfficiency function below.
     long maximumEfficiency(int n, int m) {

    	 return 0;	
    }

    private final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
    	Solution sol=new Solution();
   }
}