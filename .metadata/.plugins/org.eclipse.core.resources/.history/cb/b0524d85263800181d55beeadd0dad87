package test;

import java.util.*;

public class testDFS {
	boolean[] visited;
	HashMap<Integer,HashSet<Integer>> graph;
	testDFS(){
		
	}
	void doDFS() {
		createTestGraph1();
		visited=new boolean[graph.size()+1];
		System.out.print("DFS: ");
		DFS(1);
		System.out.println("");
	}
	void DFS(int node) {
		visited[node]=true;
		System.out.print(node+" ");
		for(int neib:graph.get(node)) {
			if (!visited[neib]) DFS(neib);
		}
	}
	void init() {
		graph=new HashMap<Integer,HashSet<Integer>>();
	}
	void addNode(int node) {
		if (graph.containsKey(node)) return;
		graph.put(node, new HashSet<Integer>());
	}
	void addEdge(int node1,int node2) {
		addNode(node1);
		addNode(node2);
		graph.get(node1).add(node2);
		graph.get(node2).add(node1);
	}
	void dumpGraph() {
		for(int node: graph.keySet()) {
			System.out.println(node+" "+graph.get(node));
		}
	}
	void createTestGraph1(){
		init();
		addEdge(1,2);
		addEdge(2,3);
		addEdge(1,3);
		addEdge(3,4);
		addEdge(4,5);
		addEdge(5,6);
		addEdge(4,6);
		dumpGraph();
	}
	public static void main(String[] args) {
		testDFS dfs=new testDFS();
	}	

}
