
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;
/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{
	int max_level=14;
	long m,n;
	int digits[];
	class Node{
		long val;
		Node left,right;
		int level;
		Node(long val,int level){
			this.val=val;
			this.level=level;
			if (val<10) {
				int ind=(int) val;
				digits[ind]=Math.min(digits[ind],level);
			}
			//System.out.println(val+" "+level);
		}
		long calcDigits(long num) {
			long res=num;
			long cur=0;
			while(res>0) {
				cur+=res%10;
				res/=10;
			}
			//System.out.println(num+"->digits:"+cur);
			return cur;
		}
		void nodify(){
			if (level==max_level) return;
			left=new Node(calcDigits(this.val),this.level+1);
			right=new Node(this.val+m,this.level+1);
			left.nodify();
			right.nodify();
		}
	}
    Codechef() throws IOException{
        Reader in=new Reader();
        int t=in.nextInt();
        while(t-- >0) {
        	n=in.nextLong();
        	m=in.nextLong();
        	digits=new int[10];
        	for(int i=0;i<10;i++) {
        		digits[i]=1000;
        	}
        	Node node=new Node(n,0);
        	node.nodify();
        	int res=9;
        	for(int i=0;i<10;i++) {
        		if (digits[i]<100){
                	System.out.println(i+" "+i);
        			break;
        		}
        	}
        }
    }
	class Reader
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1)
            {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }
 
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
 
        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }
 
        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
 
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
 
            if (c == '.')
            {
                while ((c = read()) >= '0' && c <= '9')
                {
                    ret += (c - '0') / (div *= 10);
                }
            }
 
            if (neg)
                return -ret;
            return ret;
        }
 
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }    	

	public static void main (String[] args) throws java.lang.Exception
	{
		Codechef chef=new Codechef();
			
	}
}
