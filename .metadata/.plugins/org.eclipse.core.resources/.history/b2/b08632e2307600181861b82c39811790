import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Edge implements Comparable<Edge>{
	int node1,node2;
	int brokenness;
	int id;
	Edge(int id,int node1,int node2){
		this.id=id;
		this.node1=node1;
		this.node2=node2;
		this.brokenness=0;
	}
	int other(int node) {
		return node==node1?node2:node1;
	}
	void addBrokenness(int value){
		brokenness+=value;
	}
	@Override
	public int compareTo(Edge edge) {
		if (brokenness<edge.brokenness) return -1;
		if (brokenness>edge.brokenness) return 1;
		return 0;
	}
	public String toString() {
		return id+":"+node1+"-"+node2+" ("+brokenness+")"; 
	}
	public int hashCode(){
        return id;
    }
     
    public boolean equals(Object obj){
        if (obj instanceof Edge) {
            Edge edge = (Edge) obj;
            return (this.id==edge.id);
        } else {
            return false;
        }
    }	
}
class Graph{
	HashMap<Integer,HashSet<Edge>> graph;
	Graph(){
		graph=new HashMap<Integer,HashSet<Edge>>();
	}
	void addNode(int node) {
		if (graph.containsKey(node)) return;
		graph.put(node, new HashSet<Edge>());
	}
	void addEdge(int id,int node1,int node2) {
		addNode(node1);
		addNode(node2);
		Edge edge=new Edge(id,node1,node2);
		graph.get(node1).add(edge);
		graph.get(node2).add(edge);
	}
	void dump() {
		for(int key:graph.keySet()) {
			System.out.println(key+" "+graph.get(key));
		}
	}
}
public class Solution {
	int n,m,k,t;
	Solution(){

        String[] nmkt = scanner.nextLine().split(" ");

        n = Integer.parseInt(nmkt[0]);

        m = Integer.parseInt(nmkt[1]);

        k = Integer.parseInt(nmkt[2]);

        t = Integer.parseInt(nmkt[3]);
        Graph graph=new Graph();
        for(int i=0;i<m;i++) {
        	int node1=scanner.nextInt();
        	int node2=scanner.nextInt();
        	graph.addEdge(i, node1, node2);
        	System.out.println(node1+" "+node2);
        }
        graph.dump();
        scanner.close();
		
	}
    // Complete the minimumBrokenness function below.
 

    private final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
    	Solution sol=new Solution();
    }
}
