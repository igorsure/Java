
/* package codechef; // don't place package name! */

import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef
{	
	void test() {
    	System.out.println(doit(1+2+8+1024));
    	System.out.println(doit(1+2+8+16+1024));
    	System.out.println(doit(2+8+16+64+2048));
    	System.out.println(doit(2048-3));
		
	}
    Codechef() throws IOException{
    	//test();
        Reader in=new Reader();
        int t=in.nextInt();
        while(t-- >0) {
        	int n=in.nextInt();
        	//1System.out.println(n);
        	System.out.println(doit(n));
        }
    }
    
	private int doit(int n) {
		if (n==1) return 2;
		//String s=Integer.toString(n);
		int card=calcCard(n);
		if (card==1) return 1;
		if (card==2) return 0;
		//System.out.println("card"+card);
		int res1=calcRes(n,card-2);
		int rest=n-res1;
		int top=getTop(rest);
		
		int res2=top-n;
		card=calcCard(top);
		if (card==1) res2+=1;
		return Math.min(res1,res2);
	}
	

	private int getTop(int rest) {
		int add=1;
		while ((rest & add) == 0) {
			add*=2;
		}
		return rest+add;
	}
	private int calcRes(int n, int card) {
		// TODO Auto-generated method stub
		int res=0;
		int curcard=0;
		int mult=1;
		while(curcard<card) {
			int next=n%2;
			res=res+mult*next;
			curcard+=next;
			mult=2*mult;
			n=n/2;
			//System.out.println(curcard+" "+res);
			
		}
		return res;
	}

	private int calcCard(int n) {
		// TODO Auto-generated method stub
		int res=0;
		while(n>0) {
			res+=n%2;
			n=n/2;
		}
		return res;
	}


	class Reader
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;
 
        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }
 
        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; // line length
            int cnt = 0, c;
            while ((c = read()) != -1)
            {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }
 
        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            }  while ((c = read()) >= '0' && c <= '9');
 
            if (neg)
                return -ret;
            return ret;
        }
 
        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }
 
        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
 
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
 
            if (c == '.')
            {
                while ((c = read()) >= '0' && c <= '9')
                {
                    ret += (c - '0') / (div *= 10);
                }
            }
 
            if (neg)
                return -ret;
            return ret;
        }
 
        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }
 
        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }
 
        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }    	

	public static void main (String[] args) throws java.lang.Exception
	{
		Codechef chef=new Codechef();
			
	}
}
